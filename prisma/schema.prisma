generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  genres    Genre[]
  tags      Tag[]
  recommendations Recommendation[]
  authors   Author[]
}

model Genre {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  books     Book[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  books     Book[]
}

model Book {
  id              Int               @id @default(autoincrement())
  title           String        
  isbn            String            @unique
  description     String
  cover           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  authors         Author[]
  genres          Genre[]
  recommendations Recommendation[]
  tags            Tag[]
  group           Group?
}

model Author {
  id          Int           @id @default(autoincrement())
  name        String        @unique    
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       User[]
  books       Book[]  
}

model Recommendation {
  id          Int           @id @default(autoincrement())
  book        Book          @relation(fields: [bookId], references: [id])
  bookId      Int    
  user        User          @relation(fields: [userId], references: [id])       
  userId      Int
  isMatch     Boolean
  isStored    Boolean
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Group {
  id          Int           @id @default(autoincrement())
  number      Int
  book        Book          @relation(fields: [bookId], references: [id])
  bookId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
